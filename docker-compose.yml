version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: board-games-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /root/nginx/ssl:/etc/ssl/certs
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./src/main/resources/static:/usr/share/nginx/html
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 50M

  backend:
    build: .
    container_name: board-games-backend
    expose:
      - "8080"  # Только для внутренней сети
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/board_games_db
      - SPRING_DATASOURCE_USERNAME=boardgames
      - SPRING_DATASOURCE_PASSWORD=boardgames
      - SPRING_PROFILES_ACTIVE=prod
      - TELEGRAM_WEBHOOK_PATH=https://agameboardbot.site
      - TELEGRAM_BOT_USERNAME=avo_game_board_bot
      - TELEGRAM_BOT_TOKEN=your_bot_token
      - TELEGRAM_WEBAPP_URL=https://agameboardbot.site
      - JAVA_OPTS=-XX:+UseG1GC -Xmx256m -Xms128m -XX:+UseCompressedOops
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 300M
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: board-games-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: board_games_db
      POSTGRES_USER: boardgames
      POSTGRES_PASSWORD: boardgames
      LANG: ru_RU.utf8
      LC_ALL: ru_RU.utf8
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./src/main/resources/db/migration
        target: /docker-entrypoint-initdb.d
    command: ["postgres", "-c", "max_connections=100", "-c", "shared_buffers=128MB"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U boardgames -d board_games_db"]
      interval: 20s
      timeout: 10s
      retries: 15
      start_period: 60s
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 100M

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  app-network:
    driver: bridge